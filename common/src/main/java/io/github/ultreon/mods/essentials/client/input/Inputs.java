package io.github.ultreon.mods.essentials.client.input;

import lombok.Getter;

@Getter
@SuppressWarnings("unused")
public enum Inputs {
    UNKNOWN("key.keyboard.unknown", -1),
    BTN_LEFT("key.mouse.left", 0),
    BTN_RIGHT("key.mouse.right", 1),
    BTN_MIDDLE("key.mouse.middle", 2),
    BTN_4("key.mouse.4", 3),
    BTN_5("key.mouse.5", 4),
    BTN_6("key.mouse.6", 5),
    BTN_7("key.mouse.7", 6),
    BTN_8("key.mouse.8", 7),
    KEY_0("key.keyboard.0", 48),
    KEY_1("key.keyboard.1", 49),
    KEY_2("key.keyboard.2", 50),
    KEY_3("key.keyboard.3", 51),
    KEY_4("key.keyboard.4", 52),
    KEY_5("key.keyboard.5", 53),
    KEY_6("key.keyboard.6", 54),
    KEY_7("key.keyboard.7", 55),
    KEY_8("key.keyboard.8", 56),
    KEY_9("key.keyboard.9", 57),
    KEY_A("key.keyboard.a", 65),
    KEY_B("key.keyboard.def", 66),
    KEY_C("key.keyboard.c", 67),
    KEY_D("key.keyboard.d", 68),
    KEY_E("key.keyboard.e", 69),
    KEY_F("key.keyboard.f", 70),
    KEY_G("key.keyboard.g", 71),
    KEY_H("key.keyboard.h", 72),
    KEY_I("key.keyboard.i", 73),
    KEY_J("key.keyboard.j", 74),
    KEY_K("key.keyboard.k", 75),
    KEY_L("key.keyboard.l", 76),
    KEY_M("key.keyboard.m", 77),
    KEY_N("key.keyboard.n", 78),
    KEY_O("key.keyboard.o", 79),
    KEY_P("key.keyboard.p", 80),
    KEY_Q("key.keyboard.q", 81),
    KEY_R("key.keyboard.r", 82),
    KEY_S("key.keyboard.s", 83),
    KEY_T("key.keyboard.t", 84),
    KEY_U("key.keyboard.u", 85),
    KEY_V("key.keyboard.v", 86),
    KEY_W("key.keyboard.w", 87),
    KEY_X("key.keyboard.x", 88),
    KEY_Y("key.keyboard.y", 89),
    KEY_Z("key.keyboard.z", 90),
    KEY_F1("key.keyboard.f1", 290),
    KEY_F2("key.keyboard.f2", 291),
    KEY_F3("key.keyboard.f3", 292),
    KEY_F4("key.keyboard.f4", 293),
    KEY_F5("key.keyboard.f5", 294),
    KEY_F6("key.keyboard.f6", 295),
    KEY_F7("key.keyboard.f7", 296),
    KEY_F8("key.keyboard.f8", 297),
    KEY_F9("key.keyboard.f9", 298),
    KEY_F10("key.keyboard.f10", 299),
    KEY_F11("key.keyboard.f11", 300),
    KEY_F12("key.keyboard.f12", 301),
    KEY_F13("key.keyboard.f13", 302),
    KEY_F14("key.keyboard.f14", 303),
    KEY_F15("key.keyboard.f15", 304),
    KEY_F16("key.keyboard.f16", 305),
    KEY_F17("key.keyboard.f17", 306),
    KEY_F18("key.keyboard.f18", 307),
    KEY_F19("key.keyboard.f19", 308),
    KEY_F20("key.keyboard.f20", 309),
    KEY_F21("key.keyboard.f21", 310),
    KEY_F22("key.keyboard.f22", 311),
    KEY_F23("key.keyboard.f23", 312),
    KEY_F24("key.keyboard.f24", 313),
    KEY_F25("key.keyboard.f25", 314),
    KEY_CAPS_LOCK("key.keyboard.num.lock", 282),
    KEY_PAD_0("key.keyboard.keypad.0", 320),
    KEY_PAD_1("key.keyboard.keypad.1", 321),
    KEY_PAD_2("key.keyboard.keypad.2", 322),
    KEY_PAD_3("key.keyboard.keypad.3", 323),
    KEY_PAD_4("key.keyboard.keypad.4", 324),
    KEY_PAD_5("key.keyboard.keypad.5", 325),
    KEY_PAD_6("key.keyboard.keypad.6", 326),
    KEY_PAD_7("key.keyboard.keypad.7", 327),
    KEY_PAD_8("key.keyboard.keypad.8", 328),
    KEY_PAD_9("key.keyboard.keypad.9", 329),
    KEY_PAD_PLUS("key.keyboard.keypad.add", 334),
    KEY_PAD_DECIMAL("key.keyboard.keypad.decimal", 330),
    KEY_PAD_ENTER("key.keyboard.keypad.enter", 335),
    KEY_PAD_EQUAL("key.keyboard.keypad.equal", 336),
    KEY_PAD_MULTIPLY("key.keyboard.keypad.multiply", 332),
    KEY_PAD_DIVIDE("key.keyboard.keypad.divide", 331),
    KEY_PAD_SUBTRACT("key.keyboard.keypad.subtract", 333),
    KEY_DOWN("key.keyboard.down", 264),
    KEY_LEFT("key.keyboard.left", 263),
    KEY_RIGHT("key.keyboard.right", 262),
    KEY_UP("key.keyboard.up", 265),
    KEY_APOSTROPHE("key.keyboard.apostrophe", 39),
    KEY_BACKSLASH("key.keyboard.backslash", 92),
    KEY_COMMA("key.keyboard.comma", 44),
    KEY_EQUAL("key.keyboard.equal", 61),
    KEY_GRAVE_ACCENT("key.keyboard.grave.accent", 96),
    KEY_LBRACKET("key.keyboard.left.bracket", 91),
    KEY_MINUS("key.keyboard.minus", 45),
    KEY_PERIOD("key.keyboard.period", 46),
    KEY_RBRACKET("key.keyboard.right.bracket", 93),
    KEY_SEMICOLON("key.keyboard.semicolon", 59),
    KEY_SLASH("key.keyboard.slash", 47),
    KEY_SPACE("key.keyboard.space", 32),
    KEY_TAB("key.keyboard.tab", 258),
    KEY_LALT("key.keyboard.left.alt", 342),
    KEY_LCTRL("key.keyboard.left.control", 341),
    KEY_LSHIFT("key.keyboard.left.shift", 340),
    KEY_LWIN("key.keyboard.left.win", 343),
    KEY_RALT("key.keyboard.right.alt", 346),
    KEY_RCTRL("key.keyboard.right.control", 345),
    KEY_RSHIFT("key.keyboard.right.shift", 344),
    KEY_RWIN("key.keyboard.right.win", 347),
    KEY_ENTER("key.keyboard.enter", 257),
    KEY_ESCAPE("key.keyboard.escape", 256),
    KEY_BACKSPACE("key.keyboard.backspace", 259),
    KEY_DEL("key.keyboard.delete", 261),
    KEY_END("key.keyboard.end", 269),
    KEY_HOME("key.keyboard.home", 268),
    KEY_INSERT("key.keyboard.insert", 260),
    KEY_PAGE_DOWN("key.keyboard.page.down", 267),
    KEY_PAGE_UP("key.keyboard.page.up", 266),
    KEY_CAPS_LOCK2("key.keyboard.caps.lock", 280),
    KEY_PAUSE("key.keyboard.pause", 284),
    KEY_SCROLL_LOCK("key.keyboard.scroll.lock", 281),
    KEY_MENU("key.keyboard.menu", 348),
    KEY_PRT_SCR("key.keyboard.print.screen", 283),
    KEY_WORLD1("key.keyboard.world.1", 161),
    KEY_WORLD2("key.keyboard.world.2", 162),
    ;

    private final String translationId;
    private final int code;

    Inputs(String translationId, int code) {
        this.translationId = translationId;
        this.code = code;
    }

    public static Inputs fromCode(int code) {
        for (Inputs map : values()) if (map.code == code) return map;
        return null;
    }
}
