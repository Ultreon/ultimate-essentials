plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

loom {
    accessWidenerPath = file("../common/src/main/resources/ultimate-essentials.accesswidener")

    runs {
        client {
            programArgs "--username", "Dev", "--uuid", "380df991-f603-344c-a090-369bad2a924a"
        }
        clientAlt {
            inherit client
            name = "Minecraft Client Alt"
            programArgs "--username", "DevAlt", "--uuid", "71cbc1f7-988c-3d07-90cb-08a645100f4b"
        }
    }
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${architectury_version}"

    // Lombok
    implementation 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    modApi("com.github.Ultreon.ultreonlib:ultreon-lib-fabric:$ultreonlib_version")
    modApi("com.terraformersmc:modmenu:$modmenu_version")

    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:$forge_config_api_port_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}